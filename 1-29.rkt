#lang scheme

(define (sum term a next b)
	(if (> a b)
		0
		(+ (term a)
			 (sum term (next a) next b))))
(define (integral f a b dx)
	(define (add-dx x) (+ x dx))
	(* (sum f (+ a (/ dx 2.0)) add-dx b)
		 dx))
(define (cube n)
	(* n n n))
(integral cube 0 1 0.01)
(define (odd? n)
	(= (remainder n 2) 1))
(define (inc n) (+ n 1))
(define (simpson f a b n)
	(define h (/ (- b a) n))
	(define (y k)
		(cond ((or(= k 0) (= k n))
					 (f (+ a (* k h))))
					((odd? k)
					 (* 4 (f (+ a (* k h)))))
					(else 
						(* 2 (f (+ a (* k h)))))))
	(* (/ h 3)
		 (sum y 0 inc n)))
(simpson cube 0 1 1000.0)
