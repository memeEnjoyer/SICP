#lang scheme

(define (product term a next b)
	(if (> a b)
		1
		(* (term a)
			 (product term (next a) next b))))
(define (inc n)
	(+ n 1))
(define (identity a)
	a)
(define (factorial n)
	(product identity 1 inc n))
(factorial 10)
(define (odd? n)
	(= (remainder n 2) 1))
(define (pi-approx n)
	(define (pi-next a)
		(+ a 2))
	(define (pi-term a)
		(cond ((odd?(/ a 2)) (/ a (+ a 1)))
					(else (/ a (- a 1)))))
	(product pi-term 2.0 pi-next n))
(* 4 (pi-approx 1000))
(define (product-iter term a next b)
	(define (iter a result)
		(if(> a b)
			result
			(iter (next a) (* (term a) result))))
	(iter a 1))
(define (factorial-iter n)
	(product-iter identity 1 inc n))
(factorial-iter 10)

