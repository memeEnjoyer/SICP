#lang scheme

(define (square n)
	(* n n))
(define (even? n)
	(= (remainder n 2) 0))
(define (fast-exp b n)
	(define (fast-exp-iter a b n)
		(cond ((= n 0) a)
					((even? n)
					 (fast-exp-iter a (square b) (/ n 2)))
					(else
						(fast-exp-iter (* a b) b (- n 1)))))
	(fast-exp-iter 1 b n))
(define (expmod base exp m)
	(cond ((= exp 0) 1)
				((even? exp)
				 (remainder (square (expmod base (/ exp 2) m))
										m))
				(else
					(remainder (* base (expmod base (- exp 1) m))
										 m))))
(define (carmichael? n)
	(define (iter a n)
		(cond	((= a n) #t)
					((= (expmod a n n) a) (iter (+ a 1) n))
					(else #f)))
	(iter 1 n))
(carmichael? 561)

